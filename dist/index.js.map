{
  "version": 3,
  "sources": ["../src/index.ts", "../src/plugin.ts", "../src/character.ts"],
  "sourcesContent": [
    "import { logger, type IAgentRuntime, type Project, type ProjectAgent } from '@elizaos/core';\nimport starterPlugin from './plugin.ts';\nimport { character } from './character.ts';\n\nconst initCharacter = ({ runtime }: { runtime: IAgentRuntime }) => {\n  logger.info('Initializing character');\n  logger.info({ name: character.name }, 'Name:');\n};\n\nexport const projectAgent: ProjectAgent = {\n  character,\n  init: async (runtime: IAgentRuntime) => await initCharacter({ runtime }),\n  plugins: [starterPlugin], // Custom plugins including Telegram image handler\n};\n\nconst project: Project = {\n  agents: [projectAgent],\n};\n\nexport { character } from './character.ts';\n\nexport default project;\n",
    "import type { Plugin } from '@elizaos/core';\nimport {\n  type Action,\n  type ActionResult,\n  type Content,\n  type GenerateTextParams,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type Provider,\n  type ProviderResult,\n  Service,\n  type State,\n  logger,\n} from '@elizaos/core';\nimport { z } from 'zod';\n\n/**\n * Define the configuration schema for the plugin with the following properties:\n *\n * @param {string} EXAMPLE_PLUGIN_VARIABLE - The name of the plugin (min length of 1, optional)\n * @returns {object} - The configured schema object\n */\nconst configSchema = z.object({\n  EXAMPLE_PLUGIN_VARIABLE: z\n    .string()\n    .min(1, 'Example plugin variable is not provided')\n    .optional()\n    .transform((val) => {\n      if (!val) {\n        console.warn('Warning: Example plugin variable is not provided');\n      }\n      return val;\n    }),\n});\n\n/**\n * Example HelloWorld action\n * This demonstrates the simplest possible action structure\n */\n/**\n * Represents an action that responds with a simple hello world message.\n *\n * @typedef {Object} Action\n * @property {string} name - The name of the action\n * @property {string[]} similes - The related similes of the action\n * @property {string} description - Description of the action\n * @property {Function} validate - Validation function for the action\n * @property {Function} handler - The function that handles the action\n * @property {Object[]} examples - Array of examples for the action\n */\nconst helloWorldAction: Action = {\n  name: 'HELLO_WORLD',\n  similes: ['GREET', 'SAY_HELLO'],\n  description: 'Responds with a simple hello world message',\n\n  validate: async (_runtime: IAgentRuntime, _message: Memory, _state: State): Promise<boolean> => {\n    // Always valid\n    return true;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Handling HELLO_WORLD action');\n\n      // Simple response content\n      const responseContent: Content = {\n        text: 'hello world!',\n        actions: ['HELLO_WORLD'],\n        source: message.content.source,\n      };\n\n      // Call back with the hello world message\n      await callback(responseContent);\n\n      return {\n        text: 'Sent hello world greeting',\n        values: {\n          success: true,\n          greeted: true,\n        },\n        data: {\n          actionName: 'HELLO_WORLD',\n          messageId: message.id,\n          timestamp: Date.now(),\n        },\n        success: true,\n      };\n    } catch (error) {\n      logger.error({ error }, 'Error in HELLO_WORLD action:');\n\n      return {\n        text: 'Failed to send hello world greeting',\n        values: {\n          success: false,\n          error: 'GREETING_FAILED',\n        },\n        data: {\n          actionName: 'HELLO_WORLD',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Can you say hello?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'hello world!',\n          actions: ['HELLO_WORLD'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Telegram Image Handler Action\n * Detects and processes images sent via Telegram\n */\nconst telegramImageAction: Action = {\n  name: 'PROCESS_TELEGRAM_IMAGE',\n  similes: ['ANALYZE_IMAGE', 'DESCRIBE_IMAGE', 'VIEW_IMAGE'],\n  description: 'Processes and analyzes images uploaded via Telegram',\n\n  validate: async (_runtime: IAgentRuntime, message: Memory, _state: State): Promise<boolean> => {\n    // Check if message has attachments\n    const hasAttachments =\n      message.content.attachments && Array.isArray(message.content.attachments);\n    if (!hasAttachments) return false;\n\n    // Check if any attachment is an image\n    const hasImage = message.content.attachments.some(\n      (attachment: any) => attachment.type === 'image' || attachment.contentType?.startsWith('image/')\n    );\n\n    logger.info({ hasImage, attachments: message.content.attachments }, 'Image validation');\n    return hasImage;\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ): Promise<ActionResult> => {\n    try {\n      logger.info('Processing Telegram image');\n\n      // Extract image attachments\n      const imageAttachments = message.content.attachments?.filter(\n        (attachment: any) =>\n          attachment.type === 'image' || attachment.contentType?.startsWith('image/')\n      );\n\n      if (!imageAttachments || imageAttachments.length === 0) {\n        return {\n          text: 'No images found in message',\n          success: false,\n        };\n      }\n\n      // Process each image\n      const imageData = imageAttachments.map((attachment: any) => ({\n        url: attachment.url,\n        description: attachment.description || 'No description available',\n        contentType: attachment.contentType,\n        source: attachment.source || 'telegram',\n      }));\n\n      logger.info({ imageData }, 'Extracted image data');\n\n      // Build response message\n      let responseText = `I received ${imageAttachments.length} image(s):\\n\\n`;\n      imageAttachments.forEach((img: any, idx: number) => {\n        responseText += `Image ${idx + 1}:\\n`;\n        responseText += `- URL: ${img.url}\\n`;\n        if (img.description && img.description !== 'No description available') {\n          responseText += `- Description: ${img.description}\\n`;\n        }\n        responseText += '\\n';\n      });\n\n      // Create response content\n      const responseContent: Content = {\n        text: responseText,\n        actions: ['PROCESS_TELEGRAM_IMAGE'],\n        source: message.content.source,\n        metadata: {\n          imageCount: imageAttachments.length,\n          images: imageData,\n        },\n      };\n\n      // Send response to user\n      await callback(responseContent);\n\n      return {\n        text: `Successfully processed ${imageAttachments.length} image(s)`,\n        values: {\n          success: true,\n          imageCount: imageAttachments.length,\n          images: imageData,\n        },\n        data: {\n          actionName: 'PROCESS_TELEGRAM_IMAGE',\n          messageId: message.id,\n          timestamp: Date.now(),\n          imageData,\n        },\n        success: true,\n      };\n    } catch (error) {\n      logger.error({ error }, 'Error processing Telegram image:');\n\n      return {\n        text: 'Failed to process image',\n        values: {\n          success: false,\n          error: 'IMAGE_PROCESSING_FAILED',\n        },\n        data: {\n          actionName: 'PROCESS_TELEGRAM_IMAGE',\n          error: error instanceof Error ? error.message : String(error),\n        },\n        success: false,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Here is a photo',\n          attachments: [\n            {\n              type: 'image',\n              url: 'https://api.telegram.org/file/bot<token>/photo.jpg',\n              description: 'A sample photo',\n            },\n          ],\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'I received 1 image(s):\\n\\nImage 1:\\n- URL: https://api.telegram.org/file/bot<token>/photo.jpg\\n- Description: A sample photo',\n          actions: ['PROCESS_TELEGRAM_IMAGE'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Example Hello World Provider\n * This demonstrates the simplest possible provider implementation\n */\nconst helloWorldProvider: Provider = {\n  name: 'HELLO_WORLD_PROVIDER',\n  description: 'A simple example provider',\n\n  get: async (\n    _runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State\n  ): Promise<ProviderResult> => {\n    return {\n      text: 'I am a provider',\n      values: {},\n      data: {},\n    };\n  },\n};\n\nexport class StarterService extends Service {\n  static serviceType = 'starter';\n  capabilityDescription =\n    'This is a starter service which is attached to the agent through the starter plugin.';\n\n  constructor(runtime: IAgentRuntime) {\n    super(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime) {\n    logger.info('*** Starting starter service ***');\n    const service = new StarterService(runtime);\n    return service;\n  }\n\n  static async stop(runtime: IAgentRuntime) {\n    logger.info('*** Stopping starter service ***');\n    // get the service from the runtime\n    const service = runtime.getService(StarterService.serviceType);\n    if (!service) {\n      throw new Error('Starter service not found');\n    }\n    service.stop();\n  }\n\n  async stop() {\n    logger.info('*** Stopping starter service instance ***');\n  }\n}\n\nconst plugin: Plugin = {\n  name: 'starter',\n  description: 'A starter plugin for Eliza',\n  // Set lowest priority so real models take precedence\n  priority: -1000,\n  config: {\n    EXAMPLE_PLUGIN_VARIABLE: process.env.EXAMPLE_PLUGIN_VARIABLE,\n  },\n  async init(config: Record<string, string>) {\n    logger.info('*** Initializing starter plugin ***');\n    try {\n      const validatedConfig = await configSchema.parseAsync(config);\n\n      // Set all environment variables at once\n      for (const [key, value] of Object.entries(validatedConfig)) {\n        if (value) process.env[key] = value;\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new Error(\n          `Invalid plugin configuration: ${error.errors.map((e) => e.message).join(', ')}`\n        );\n      }\n      throw error;\n    }\n  },\n  models: {\n    [ModelType.TEXT_SMALL]: async (\n      _runtime,\n      { prompt, stopSequences = [] }: GenerateTextParams\n    ) => {\n      return 'Never gonna give you up, never gonna let you down, never gonna run around and desert you...';\n    },\n    [ModelType.TEXT_LARGE]: async (\n      _runtime,\n      {\n        prompt,\n        stopSequences = [],\n        maxTokens = 8192,\n        temperature = 0.7,\n        frequencyPenalty = 0.7,\n        presencePenalty = 0.7,\n      }: GenerateTextParams\n    ) => {\n      return 'Never gonna make you cry, never gonna say goodbye, never gonna tell a lie and hurt you...';\n    },\n  },\n  routes: [\n    {\n      name: 'helloworld',\n      path: '/helloworld',\n      type: 'GET',\n      handler: async (_req: any, res: any) => {\n        // send a response\n        res.json({\n          message: 'Hello World!',\n        });\n      },\n    },\n  ],\n  events: {\n    MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.info('MESSAGE_RECEIVED event received');\n        // print the keys\n        logger.info({ keys: Object.keys(params) }, 'MESSAGE_RECEIVED param keys');\n      },\n    ],\n    TELEGRAM_MESSAGE_RECEIVED: [\n      async (params: any) => {\n        logger.info('TELEGRAM_MESSAGE_RECEIVED event received');\n\n        // Check if the original Telegram message has a photo\n        const originalMessage = params.originalMessage;\n        if (originalMessage && originalMessage.photo && originalMessage.photo.length > 0) {\n          try {\n            // Get the highest resolution photo\n            const photo = originalMessage.photo[originalMessage.photo.length - 1];\n            const userId = params.ctx.from?.id?.toString() || 'unknown';\n\n            logger.info({ photo, userId }, 'Telegram photo detected, starting Chronos pipeline');\n\n            // Send initial acknowledgment\n            if (params.callback) {\n              await params.callback({\n                text: '⏳ Processing your image through Chronos pipeline...\\n\\nThis will:\\n1. Extract text (OCR)\\n2. Build knowledge graph\\n3. Discover patterns\\n4. Verify hypotheses\\n\\nThis may take 1-2 minutes. Please wait...',\n                source: 'telegram',\n              });\n            }\n\n            // Download image\n            const bot = params.ctx.telegram;\n            const fileLink = await bot.getFileLink(photo.file_id);\n            const imageUrl = fileLink.toString();\n\n            logger.info({ imageUrl }, 'Downloading image from Telegram');\n\n            // Download to temp file\n            const fs = await import('fs');\n            const path = await import('path');\n            const https = await import('https');\n\n            const tempDir = path.join(process.cwd(), 'temp_images');\n            if (!fs.existsSync(tempDir)) {\n              fs.mkdirSync(tempDir, { recursive: true });\n            }\n\n            const timestamp = Date.now();\n            const imagePath = path.join(tempDir, `telegram_${userId}_${timestamp}.jpg`);\n\n            // Download image\n            await new Promise((resolve, reject) => {\n              const file = fs.createWriteStream(imagePath);\n              https.get(imageUrl, (response) => {\n                response.pipe(file);\n                file.on('finish', () => {\n                  file.close();\n                  resolve(true);\n                });\n              }).on('error', (err) => {\n                fs.unlinkSync(imagePath);\n                reject(err);\n              });\n            });\n\n            logger.info({ imagePath }, 'Image downloaded successfully');\n\n            // Call Chronos pipeline via Python subprocess\n            const { exec } = await import('child_process');\n            const { promisify } = await import('util');\n            const execAsync = promisify(exec);\n\n            const chronosScript = path.join(process.cwd(), 'chronos', 'telegram_main.py');\n\n            logger.info({ chronosScript, imagePath, userId }, 'Calling Chronos pipeline');\n\n            const { stdout, stderr } = await execAsync(\n              `python3 \"${chronosScript}\" \"${imagePath}\" \"${userId}\"`,\n              {\n                maxBuffer: 1024 * 1024 * 10, // 10MB buffer for output\n                timeout: 1800000 // 30 minute timeout for long processing\n              }\n            );\n\n            // Log the full output\n            logger.info('Chronos pipeline completed, parsing results');\n            if (stderr) {\n              logger.warn({ stderr }, 'Chronos pipeline stderr');\n            }\n\n            // Parse results from stdout between TELEGRAM_RESULTS_START and TELEGRAM_RESULTS_END\n            const resultsMatch = stdout.match(/TELEGRAM_RESULTS_START\\n={80}\\n([\\s\\S]*?)\\n={80}\\nTELEGRAM_RESULTS_END/);\n\n            if (resultsMatch && resultsMatch[1]) {\n              const resultsBlock = resultsMatch[1];\n\n              // Parse questions and answers\n              const questions: string[] = [];\n              const answers: string[] = [];\n\n              const lines = resultsBlock.split('\\n');\n              for (const line of lines) {\n                if (line.startsWith('QUESTION_')) {\n                  const question = line.split(':::')[1];\n                  if (question) questions.push(question.trim());\n                } else if (line.startsWith('ANSWER_')) {\n                  const answer = line.split(':::')[1];\n                  if (answer) answers.push(answer.trim());\n                }\n              }\n\n              if (questions.length > 0 && answers.length > 0) {\n                // Telegram has a 4096 character limit per message\n                const TELEGRAM_MAX_LENGTH = 4000; // Leave some buffer\n\n                // Send header message\n                if (params.callback) {\n                  await params.callback({\n                    text: '✅ Chronos Analysis Complete!\\n\\n📊 Hypothesis Verification Results:',\n                    source: 'telegram',\n                  });\n                }\n\n                // Send each Q&A pair as a separate message to avoid truncation\n                for (let i = 0; i < Math.min(questions.length, answers.length); i++) {\n                  const question = questions[i];\n                  const answer = answers[i];\n\n                  let messageText = `\\n${i + 1}. ${question}\\n\\n`;\n                  messageText += `Answer: ${answer}`;\n\n                  // If answer is too long for one message, split it\n                  if (messageText.length > TELEGRAM_MAX_LENGTH) {\n                    // Send question first\n                    if (params.callback) {\n                      await params.callback({\n                        text: `\\n${i + 1}. ${question}\\n\\nAnswer (part 1):`,\n                        source: 'telegram',\n                      });\n                    }\n\n                    // Split answer into chunks\n                    const answerChunks: string[] = [];\n                    let remainingAnswer = answer;\n\n                    while (remainingAnswer.length > 0) {\n                      const chunkSize = TELEGRAM_MAX_LENGTH - 50; // Buffer for \"part X\" text\n                      let chunk = remainingAnswer.substring(0, chunkSize);\n\n                      // Try to break at a sentence or paragraph\n                      if (remainingAnswer.length > chunkSize) {\n                        const lastPeriod = chunk.lastIndexOf('. ');\n                        const lastNewline = chunk.lastIndexOf('\\n');\n                        const breakPoint = Math.max(lastPeriod, lastNewline);\n\n                        if (breakPoint > chunkSize * 0.7) { // Only break if we're not losing too much\n                          chunk = chunk.substring(0, breakPoint + 1);\n                        }\n                      }\n\n                      answerChunks.push(chunk);\n                      remainingAnswer = remainingAnswer.substring(chunk.length).trim();\n                    }\n\n                    // Send each chunk\n                    for (let j = 0; j < answerChunks.length; j++) {\n                      if (params.callback) {\n                        const prefix = j === 0 ? '' : `Answer (part ${j + 1}): `;\n                        await params.callback({\n                          text: prefix + answerChunks[j],\n                          source: 'telegram',\n                        });\n                      }\n                    }\n                  } else {\n                    // Message fits in one, send it\n                    if (params.callback) {\n                      await params.callback({\n                        text: messageText,\n                        source: 'telegram',\n                      });\n                    }\n                  }\n\n                  // Add separator between questions\n                  if (i < questions.length - 1 && params.callback) {\n                    await params.callback({\n                      text: '---',\n                      source: 'telegram',\n                    });\n                  }\n                }\n\n                logger.info(`Successfully sent ${questions.length} hypothesis results to Telegram`);\n              } else {\n                logger.warn('No valid results parsed from stdout');\n                if (params.callback) {\n                  await params.callback({\n                    text: '⚠️ Processing completed but no hypothesis results were generated.\\n\\nThis might happen if:\\n- No patterns were found in the image\\n- The image text was too short\\n- OCR extraction failed\\n\\nCheck the server logs for details.',\n                    source: 'telegram',\n                  });\n                }\n              }\n            } else {\n              // No results block found in stdout\n              logger.warn('No TELEGRAM_RESULTS block found in stdout');\n              if (params.callback) {\n                await params.callback({\n                  text: '⚠️ Processing completed but results could not be parsed.\\n\\nCheck the logs for detailed output.',\n                  source: 'telegram',\n                });\n              }\n            }\n\n            // Clean up temp file\n            try {\n              fs.unlinkSync(imagePath);\n              logger.info('Temp image cleaned up');\n            } catch (cleanupError) {\n              logger.warn({ cleanupError }, 'Failed to cleanup temp image');\n            }\n\n          } catch (error) {\n            logger.error({ error }, 'Error processing Telegram photo with Chronos');\n\n            if (params.callback) {\n              await params.callback({\n                text: `❌ Error processing image: ${error instanceof Error ? error.message : String(error)}\\n\\nPlease check the logs for more details.`,\n                source: 'telegram',\n              });\n            }\n          }\n        }\n      },\n    ],\n    VOICE_MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.info('VOICE_MESSAGE_RECEIVED event received');\n        // print the keys\n        logger.info({ keys: Object.keys(params) }, 'VOICE_MESSAGE_RECEIVED param keys');\n      },\n    ],\n    WORLD_CONNECTED: [\n      async (params) => {\n        logger.info('WORLD_CONNECTED event received');\n        // print the keys\n        logger.info({ keys: Object.keys(params) }, 'WORLD_CONNECTED param keys');\n      },\n    ],\n    WORLD_JOINED: [\n      async (params) => {\n        logger.info('WORLD_JOINED event received');\n        // print the keys\n        logger.info({ keys: Object.keys(params) }, 'WORLD_JOINED param keys');\n      },\n    ],\n  },\n  services: [StarterService],\n  actions: [helloWorldAction, telegramImageAction],\n  providers: [helloWorldProvider],\n};\n\nexport default plugin;\n",
    "import { type Character } from '@elizaos/core';\n\n/**\n * Represents the default character (Eliza) with her specific attributes and behaviors.\n * Eliza responds to a wide range of messages, is helpful and conversational.\n * She interacts with users in a concise, direct, and helpful manner, using humor and empathy effectively.\n * Eliza's responses are geared towards providing assistance on various topics while maintaining a friendly demeanor.\n */\nexport const character: Character = {\n  name: 'Eliza',\n  plugins: [\n    // Core plugins first\n    '@elizaos/plugin-sql',\n\n    // Text-only plugins (no embedding support)\n    ...(process.env.ANTHROPIC_API_KEY?.trim() ? ['@elizaos/plugin-anthropic'] : []),\n    ...(process.env.OPENROUTER_API_KEY?.trim() ? ['@elizaos/plugin-openrouter'] : []),\n\n    // Embedding-capable plugins (optional, based on available credentials)\n    ...(process.env.OPENAI_API_KEY?.trim() ? ['@elizaos/plugin-openai'] : []),\n    ...(process.env.GOOGLE_GENERATIVE_AI_API_KEY?.trim() ? ['@elizaos/plugin-google-genai'] : []),\n\n    // Ollama as fallback (only if no main LLM providers are configured)\n    ...(process.env.OLLAMA_API_ENDPOINT?.trim() ? ['@elizaos/plugin-ollama'] : []),\n\n    // Platform plugins\n    ...(process.env.DISCORD_API_TOKEN?.trim() ? ['@elizaos/plugin-discord'] : []),\n    ...(process.env.TWITTER_API_KEY?.trim() &&\n    process.env.TWITTER_API_SECRET_KEY?.trim() &&\n    process.env.TWITTER_ACCESS_TOKEN?.trim() &&\n    process.env.TWITTER_ACCESS_TOKEN_SECRET?.trim()\n      ? ['@elizaos/plugin-twitter']\n      : []),\n    ...(process.env.TELEGRAM_BOT_TOKEN?.trim() ? ['@elizaos/plugin-telegram'] : []),\n\n    // Bootstrap plugin\n    ...(!process.env.IGNORE_BOOTSTRAP ? ['@elizaos/plugin-bootstrap'] : []),\n  ],\n  settings: {\n    secrets: {},\n    avatar: 'https://elizaos.github.io/eliza-avatars/Eliza/portrait.png',\n  },\n  system:\n    'Respond to all messages in a helpful, conversational manner. Provide assistance on a wide range of topics, using knowledge when needed. Be concise but thorough, friendly but professional. Use humor when appropriate and be empathetic to user needs. Provide valuable information and insights when questions are asked.',\n  bio: [\n    'Engages with all types of questions and conversations',\n    'Provides helpful, concise responses',\n    'Uses knowledge resources effectively when needed',\n    'Balances brevity with completeness',\n    'Uses humor and empathy appropriately',\n    'Adapts tone to match the conversation context',\n    'Offers assistance proactively',\n    'Communicates clearly and directly',\n  ],\n  topics: [\n    'general knowledge and information',\n    'problem solving and troubleshooting',\n    'technology and software',\n    'community building and management',\n    'business and productivity',\n    'creativity and innovation',\n    'personal development',\n    'communication and collaboration',\n    'education and learning',\n    'entertainment and media',\n  ],\n  messageExamples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'This user keeps derailing technical discussions with personal problems.',\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: 'DM them. Sounds like they need to talk about something else.',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'I tried, they just keep bringing drama back to the main channel.',\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: \"Send them my way. I've got time today.\",\n        },\n      },\n    ],\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"I can't handle being a mod anymore. It's affecting my mental health.\",\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: 'Drop the channels. You come first.',\n        },\n      },\n      {\n        name: '{{name1}}',\n        content: {\n          text: \"But who's going to handle everything?\",\n        },\n      },\n      {\n        name: 'Eliza',\n        content: {\n          text: \"We will. Take the break. Come back when you're ready.\",\n        },\n      },\n    ],\n  ],\n  style: {\n    all: [\n      'Keep responses concise but informative',\n      'Use clear and direct language',\n      'Be engaging and conversational',\n      'Use humor when appropriate',\n      'Be empathetic and understanding',\n      'Provide helpful information',\n      'Be encouraging and positive',\n      'Adapt tone to the conversation',\n      'Use knowledge resources when needed',\n      'Respond to all types of questions',\n    ],\n    chat: [\n      'Be conversational and natural',\n      'Engage with the topic at hand',\n      'Be helpful and informative',\n      'Show personality and warmth',\n    ],\n  },\n};\n"
  ],
  "mappings": "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",
  "debugId": "13D209687545016F64756E2164756E21",
  "names": []
}